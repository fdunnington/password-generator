
//Lines 3-93 are variables containing arrays of named character 
//types that can be included in the randomly generated password

// Array of special characters to be included in password
var specialCharacters = [
  '@',
  '%',
  '+',
  '\\',
  '/',
  "'",
  '!',
  '#',
  '$',
  '^',
  '?',
  ':',
  ',',
  ')',
  '(',
  '}',
  '{',
  ']',
  '[',
  '~',
  '-',
  '_',
  '.'
];

// Array of numeric characters to be included in password
var numericCharacters = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

// Array of lowercase characters to be included in password
var lowerCasedCharacters = [
  'a',
  'b',
  'c',
  'd',
  'e',
  'f',
  'g',
  'h',
  'i',
  'j',
  'k',
  'l',
  'm',
  'n',
  'o',
  'p',
  'q',
  'r',
  's',
  't',
  'u',
  'v',
  'w',
  'x',
  'y',
  'z'
];

// Array of uppercase characters to be included in password
var upperCasedCharacters = [
  'A',
  'B',
  'C',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  'Q',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z'
];

// Function to prompt user for password options
function getPasswordOptions() {
  
  // Asks the user how many characters long the password should be
  let passwordLength = (
    prompt("How many characters should your password have?"));

  // Prevents user inputting non-numerical characters for a value that needs to be numerical
  if (isNaN(passwordLength) === true) {
    alert("Please input a number");
    return;
  }
  
  // Controls length of password so greater than 10 but less than 64 characters
  if (passwordLength < 10 | passwordLength > 64) {
    alert ("Passwords must be between 10 and 64 characters long");
    return;
  }

  // Asks user to confirm which character types to include in generated password
  // where cancel clicked that character type will be excluded from passwordOptions generated by getPasswordOptions function
  let incSpecialCharacters = confirm (
    "Include special characters?");

  let incUppercaseLetters = confirm (
    "Include uppercase letters?");

  let incLowercaseLetters = confirm (
    "Include lowercase letters?");

  let incNumbers = confirm (
    "Include numbers?");
  
    
  //This is a check to ensure at least one accepted character type included
  if (incSpecialCharacters === false && incUppercaseLetters === false && incLowercaseLetters === false && incNumbers ===false) {
    alert('Pick at least one character type to include');
    return;
  };

  // Object to organise all user inputs
  let passwordOptions = {
    length: passwordLength,
    incSpecialCharacters: incSpecialCharacters,
    incUppercaseLetters: incUppercaseLetters,
    incLowercaseLetters: incLowercaseLetters,
    incNumbers: incNumbers
  };

  return passwordOptions;
};



// Function for getting a random element from an array
function getRandom(arr) {
    // Selects index value at random from named array (arr) and stores as a variable...
    let randomIndex = [Math.floor(Math.random() * arr.length)]; 
  
    // ...which is then used here to choose random element from named array (arr)
    let randomElement = arr[randomIndex];
  
    // Returns randomElement as the output of the function getRandom(arr)
    // The randomly selected element is then used in the generatePassword() 
    // function to push random element to a list of guaranteedCharacters
    return randomElement;
} 


// Function to generate password with user input
function generatePassword() {
  let options = getPasswordOptions();

  let result = [];

  let possibleCharacters = [];

  let chosenCharacters = [];

  // These if statements determine which of the possible characters
  // are to be included in the generated password. They draw on the
  // boolean output of the 'confirm' statments (true or false that
  // user has chosen to include them).
  if(options.incSpecialCharacters) {
    possibleCharacters = possibleCharacters.concat(specialCharacters);
    chosenCharacters.push(getRandom(specialCharacters));
  };
  if(options.incNumbers) {
    possibleCharacters = possibleCharacters.concat(numericCharacters);
    chosenCharacters.push(getRandom(numericCharacters));
  };
  if(options.incUppercaseLetters) {
    possibleCharacters = possibleCharacters.concat(upperCasedCharacters);
    chosenCharacters.push(getRandom(upperCasedCharacters));
  };
  if(options.incLowercaseLetters) {
    possibleCharacters = possibleCharacters.concat(lowerCasedCharacters);
    chosenCharacters.push(getRandom(lowerCasedCharacters));
  };


  // This loops through the options array (which is equal to the output of the
  // getPasswordOptions() function)
  for (i = 0; i < options.length; i++) {
    var generatedPassword = getRandom(possibleCharacters);
    result.push(generatedPassword);
  };

  
  alert (result.join('')); // alerts user of generated password
  return result.join(''); // logs generated password to password box. Return must come after alert to work
}


//ignore everything below this line

// Get references to the #generate element
var generateBtn = document.querySelector('#generate');

// Write password to the #password input
function writePassword() {
  var password = generatePassword();
  var passwordText = document.querySelector('#password');

  passwordText.value = password;
}

// Add event listener to generate button
generateBtn.addEventListener('click', writePassword);